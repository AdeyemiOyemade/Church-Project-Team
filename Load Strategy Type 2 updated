CREATE PROCEDURE LoadMEMBERtype2 AS
BEGIN
DELETE FROM [DLBC_Dev].[dbo].[MEMBER];



MERGE  [DLBC_Dev].[dbo].[MEMBER] AS T
USING [DLBC_Stg].[dbo].[memberSTG] AS S
ON T.[MEMBER_CODE] = S.[Member Code]

--When records are matched, update the records if there is any change to the named columns
WHEN MATCHED AND T.[RECORD_CHECKSUM] <> S.[Record Checksum] 
AND T.[ACTIVE_IND] = 'Y' THEN 
UPDATE 
SET T.[END_EFFECTIVE_DT] = GETDATE() - 1,
    T.[ACTIVE_IND] = 'N',
	T.[LAST_UPDATE_DT] = GETDATE(),
	T.[LAST_UPDATE_USER_ID] = USER
	
    
--When records are not matched, insert the records into the Target meaning they donot exist in the target
WHEN NOT MATCHED BY TARGET THEN 
INSERT ([MEMBER_CODE],[PARENT_MEMBER_ID],[PRIMARY_FIRST_NM],[PRIMARY_MIDDEL_NM],[PRIMARY_LAST_NM],[GENDER],[DOB],[PRIMARY_EMAIL_ADDRESS_TXT],[PRIMARY_PHONE_NO]
      ,[CREATE_USER_ID],[CREATE_DT],[LAST_UPDATE_USER_ID],[LAST_UPDATE_DT],[LOCATION_ID],[BEGIN_EFFECTIVE_DT],[END_EFFECTIVE_DT],[ACTIVE_IND],[RECORD_CHECKSUM])

 VALUES     (S.[Member Code],1,S.[First Name],S.[Middle Name],S.[Last Name],S.[Gender],GETDATE(),S.[eMail Address],S.[Cellphone],USER,GETDATE(),USER,GETDATE(),S.[LOCATION_ID],GETDATE(),'12/31/9999','Y',S.[Record Checksum])
WHEN NOT MATCHED BY SOURCE THEN
DELETE;
END
OUTPUT S.[Member code], $action into @MergeLog;

SELECT MergeAction, count(*)
FROM   @MergeLog
GROUP BY MergeAction

-- Create a Sequence to control control the population of the sorrogate key

CREATE SEQUENCE Member_load
    AS INT
    START WITH 1
    INCREMENT BY 1
---Changed Record verify

update dbo.tblStaging set DimensionCheckSum=
BINARY_CHECKSUM(SourceSystemID, Attribute1, Attribute2, Attribute3)