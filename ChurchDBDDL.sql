/*
 * ER/Studio Data Architect SQL Code Generation
 * Project :      Church Database.DM1
 *
 * Date Created : Monday, August 26, 2019 01:45:12
 * Target DBMS : Microsoft SQL Server 2016
 */

/* 
 * TABLE: EMAIL 
 */

CREATE TABLE EMAIL(
    EMAIL_ID             numeric(10, 0)    IDENTITY(1,1),
    EMAIL_ADDRESS_TXT    varchar(50)       NULL,
    CREATE_USER_ID       varchar(30)       NOT NULL,
    CREATE_DT            date              DEFAULT 'sysdate' NOT NULL,
    CONSTRAINT PK_EMAIL PRIMARY KEY NONCLUSTERED (EMAIL_ID)
)
go



IF OBJECT_ID('EMAIL') IS NOT NULL
    PRINT '<<< CREATED TABLE EMAIL >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE EMAIL >>>'
go

/* 
 * TABLE: LOCATION 
 */

CREATE TABLE LOCATION(
    LOCATION_ID           int            IDENTITY(1,1),
    LOCATION_NM           varchar(50)    NOT NULL,
    ADDRESS_LINE_1_TXT    varchar(20)    NOT NULL,
    ADDRESS_LINE_2        varchar(10)    NULL,
    CITY_NM               varchar(15)    NOT NULL,
    STATE_NM              varchar(15)    NOT NULL,
    COUNTRY_NM            varchar(20)    NOT NULL,
    CREATE_USER_ID        varchar(30)    NOT NULL,
    CREATE_DT             date           DEFAULT 'sysdate' NOT NULL,
    CONSTRAINT PK_LOCATION PRIMARY KEY NONCLUSTERED (LOCATION_ID)
)
go



IF OBJECT_ID('LOCATION') IS NOT NULL
    PRINT '<<< CREATED TABLE LOCATION >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE LOCATION >>>'
go

/* 
 * TABLE: MEMBER 
 */

CREATE TABLE MEMBER(
    MEMBER_ID                    numeric(10, 0)    IDENTITY(1,1),
    PARENT_MEMBER_ID             numeric(10, 0)    NOT NULL,
    PRIMARY_FIRST_NM             varchar(30)       NOT NULL,
    PRIMARY_MIDDEL_NM            varchar(30)       NULL,
    PRIMARY_LAST_NM              varchar(30)       NOT NULL,
    DOB                          date              NOT NULL,
    PRIMARY_EMAIL_ADDRESS_TXT    varchar(30)       NOT NULL,
    PRIMARY_PHONE_NO             varchar(12)       NOT NULL,
    CREATE_USER_ID               varchar(30)       NOT NULL,
    CREATE_DT                    date              DEFAULT 'sysdate' NOT NULL,
    LAST_UPDATE_USER_ID          varchar(30)       NOT NULL,
    LAST_UPDATE_DT               date              DEFAULT '12/31/2099' NOT NULL,
    LOCATION_ID                  int               NOT NULL,
    CONSTRAINT PK_MEMBER PRIMARY KEY NONCLUSTERED (MEMBER_ID)
)
go



IF OBJECT_ID('MEMBER') IS NOT NULL
    PRINT '<<< CREATED TABLE MEMBER >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE MEMBER >>>'
go

/* 
 * TABLE: MEMBER_ADDRESS 
 */

CREATE TABLE MEMBER_ADDRESS(
    ADDRESS_ID             numeric(10, 0)    NOT NULL,
    ADDRESS_TYPE_CD        varchar(10)       NOT NULL,
    MEMBER_ID              numeric(10, 0)    NOT NULL,
    END_DT                 date              DEFAULT '12/31/2099' NOT NULL,
    BEGIN_DT               date              NOT NULL,
    CREATE_USER_ID         varchar(30)       NOT NULL,
    CREATE_DT              date              DEFAULT 'sysdate' NOT NULL,
    LAST_UPDATE_USER_ID    varchar(30)       NOT NULL,
    LAST_UPDATE_DT         date              DEFAULT '12/31/2099' NOT NULL,
    CONSTRAINT PK_MEMBER_ADDRESS PRIMARY KEY NONCLUSTERED (ADDRESS_ID, ADDRESS_TYPE_CD, MEMBER_ID, END_DT)
)
go



IF OBJECT_ID('MEMBER_ADDRESS') IS NOT NULL
    PRINT '<<< CREATED TABLE MEMBER_ADDRESS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE MEMBER_ADDRESS >>>'
go

/* 
 * TABLE: MEMBER_CONTRIBUTION 
 */

CREATE TABLE MEMBER_CONTRIBUTION(
    MEMBER_ID              numeric(10, 0)    NOT NULL,
    CONTRIBUTION_ID        int               NOT NULL,
    CONTRIBUTION_DT        date              NOT NULL,
    AMOUNT                 numeric(10, 2)    NOT NULL,
    CREATE_USER_ID         varchar(30)       NOT NULL,
    CREATE_DT              date              DEFAULT 'sysdate' NOT NULL,
    LAST_UPDATE_USER_ID    varchar(30)       NOT NULL,
    LAST_UPDATE_DT         date              DEFAULT '12/31/2099' NOT NULL,
    CONSTRAINT PK_MEMBER_CONTRIBUTION PRIMARY KEY NONCLUSTERED (MEMBER_ID, CONTRIBUTION_ID)
)
go



IF OBJECT_ID('MEMBER_CONTRIBUTION') IS NOT NULL
    PRINT '<<< CREATED TABLE MEMBER_CONTRIBUTION >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE MEMBER_CONTRIBUTION >>>'
go

/* 
 * TABLE: MEMBER_EMAIL 
 */

CREATE TABLE MEMBER_EMAIL(
    MEMBER_ID              numeric(10, 0)    NOT NULL,
    EMAIL_ID               numeric(10, 0)    NOT NULL,
    END_DT                 date              DEFAULT '12/31/2099' NOT NULL,
    EMAIL_TYP              varchar(10)       NOT NULL,
    BEGIN_DT               date              NOT NULL,
    CREATE_USER_ID         varchar(30)       NOT NULL,
    CREATE_DT              date              DEFAULT 'sysdate' NOT NULL,
    LAST_UPDATE_USER_ID    varchar(30)       NOT NULL,
    LAST_UPDATE_DT         date              DEFAULT '12/31/2099' NOT NULL,
    CONSTRAINT PK_MEMBER_EMAIL PRIMARY KEY NONCLUSTERED (MEMBER_ID, EMAIL_ID, END_DT)
)
go



IF OBJECT_ID('MEMBER_EMAIL') IS NOT NULL
    PRINT '<<< CREATED TABLE MEMBER_EMAIL >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE MEMBER_EMAIL >>>'
go

/* 
 * TABLE: MEMBER_GROUP 
 */

CREATE TABLE MEMBER_GROUP(
    GROUP_TYPE_CD          varchar(5)        NOT NULL,
    MEMBER_ID              numeric(10, 0)    NOT NULL,
    END_DT                 date              DEFAULT '12/31/2099' NOT NULL,
    BEGIN_DT               date              NOT NULL,
    CREATE_USER_ID         varchar(30)       NOT NULL,
    CREATE_DT              date              DEFAULT 'sysdate' NOT NULL,
    LAST_UPDATE_USER_ID    varchar(30)       NOT NULL,
    LAST_UPDATE_DT         date              DEFAULT '12/31/2099' NOT NULL,
    CONSTRAINT PK_MEMBER_GROUP PRIMARY KEY NONCLUSTERED (GROUP_TYPE_CD, MEMBER_ID, END_DT)
)
go



IF OBJECT_ID('MEMBER_GROUP') IS NOT NULL
    PRINT '<<< CREATED TABLE MEMBER_GROUP >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE MEMBER_GROUP >>>'
go

/* 
 * TABLE: MEMBER_MINISTRY 
 */

CREATE TABLE MEMBER_MINISTRY(
    MINISTRY_ID            numeric(10, 0)    NOT NULL,
    MEMBER_ID              numeric(10, 0)    NOT NULL,
    END_DT                 date              DEFAULT '12/31/2099' NOT NULL,
    BEGIN_DT               date              NOT NULL,
    CREATE_USER_ID         varchar(30)       NOT NULL,
    CREATE_DT              date              DEFAULT 'sysdate' NOT NULL,
    LAST_UPDATE_USER_ID    varchar(30)       NOT NULL,
    LAST_UPDATE_DT         date              DEFAULT '12/31/2099' NOT NULL,
    CONSTRAINT PK_MEMBER_MINISTRY PRIMARY KEY NONCLUSTERED (MINISTRY_ID, MEMBER_ID, END_DT)
)
go



IF OBJECT_ID('MEMBER_MINISTRY') IS NOT NULL
    PRINT '<<< CREATED TABLE MEMBER_MINISTRY >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE MEMBER_MINISTRY >>>'
go

/* 
 * TABLE: MEMBER_NAME 
 */

CREATE TABLE MEMBER_NAME(
    NAME_ID                numeric(10, 0)    NOT NULL,
    MEMBER_ID              numeric(10, 0)    NOT NULL,
    END_DT                 date              DEFAULT '12/31/2099' NOT NULL,
    BEGIN_DT               date              NOT NULL,
    NAME_TYP               varchar(10)       NOT NULL,
    CREATE_USER_ID         varchar(30)       NOT NULL,
    CREATE_DT              date              DEFAULT 'sysdate' NOT NULL,
    LAST_UPDATE_USER_ID    varchar(30)       NOT NULL,
    LAST_UPDATE_DT         date              DEFAULT '12/31/2099' NOT NULL,
    CONSTRAINT PK_MEMBER_NAME PRIMARY KEY NONCLUSTERED (NAME_ID, MEMBER_ID, END_DT)
)
go



IF OBJECT_ID('MEMBER_NAME') IS NOT NULL
    PRINT '<<< CREATED TABLE MEMBER_NAME >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE MEMBER_NAME >>>'
go

/* 
 * TABLE: MEMBER_PHONE 
 */

CREATE TABLE MEMBER_PHONE(
    MEMBER_ID              numeric(10, 0)    NOT NULL,
    PHONE_NUMBER_ID        numeric(10, 0)    NOT NULL,
    END_DT                 date              DEFAULT '12/31/2099' NOT NULL,
    PHONE_TYP              varchar(10)       NOT NULL,
    BEGIN_DT               date              NOT NULL,
    CREATE_USER_ID         varchar(30)       NOT NULL,
    CREATE_DT              date              DEFAULT 'sysdate' NOT NULL,
    LAST_UPDATE_USER_ID    varchar(30)       NOT NULL,
    LAST_UPDATE_DT         date              DEFAULT '12/31/2099' NOT NULL,
    CONSTRAINT PK_MEMBER_PHONE PRIMARY KEY NONCLUSTERED (MEMBER_ID, PHONE_NUMBER_ID, END_DT)
)
go



IF OBJECT_ID('MEMBER_PHONE') IS NOT NULL
    PRINT '<<< CREATED TABLE MEMBER_PHONE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE MEMBER_PHONE >>>'
go

/* 
 * TABLE: MEMBER_TYPE 
 */

CREATE TABLE MEMBER_TYPE(
    MEMBER_TYPE_ID     numeric(10, 0)    IDENTITY(1,1),
    MEMBER_TYP         varchar(10)       NOT NULL,
    DESCRIPTION_TXT    varchar(30)       NOT NULL,
    CREATE_USER_ID     varchar(30)       NOT NULL,
    CREATE_DT          date              DEFAULT 'sysdate' NOT NULL,
    CONSTRAINT PK_MEMBER_TYPE PRIMARY KEY NONCLUSTERED (MEMBER_TYPE_ID)
)
go



IF OBJECT_ID('MEMBER_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE MEMBER_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE MEMBER_TYPE >>>'
go

/* 
 * TABLE: MEMBERSHIP 
 */

CREATE TABLE MEMBERSHIP(
    MEMBER_ID              numeric(10, 0)    NOT NULL,
    MEMBER_TYPE_ID         numeric(10, 0)    NOT NULL,
    END_DT                 date              DEFAULT '12/31/2099' NOT NULL,
    BEGIN_DT               date              NOT NULL,
    CREATE_USER_ID         varchar(30)       NOT NULL,
    CREATE_DT              date              DEFAULT 'sysdate' NOT NULL,
    LAST_UPDATE_USER_ID    varchar(30)       NOT NULL,
    LAST_UPDATE_DT         date              DEFAULT '12/31/2099' NOT NULL,
    CONSTRAINT PK_MEMBERSHIP PRIMARY KEY NONCLUSTERED (MEMBER_ID, MEMBER_TYPE_ID, END_DT)
)
go



IF OBJECT_ID('MEMBERSHIP') IS NOT NULL
    PRINT '<<< CREATED TABLE MEMBERSHIP >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE MEMBERSHIP >>>'
go

/* 
 * TABLE: NAME 
 */

CREATE TABLE NAME(
    NAME_ID           numeric(10, 0)    IDENTITY(1,1),
    FIRST_NM          varchar(30)       NOT NULL,
    MIDDLE_NM         varchar(20)       NULL,
    LAST_NM           varchar(30)       NOT NULL,
    CREATE_USER_ID    varchar(30)       NOT NULL,
    CREATE_DT         date              DEFAULT 'sysdate' NOT NULL,
    CONSTRAINT PK_NAME PRIMARY KEY NONCLUSTERED (NAME_ID)
)
go



IF OBJECT_ID('NAME') IS NOT NULL
    PRINT '<<< CREATED TABLE NAME >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE NAME >>>'
go

/* 
 * TABLE: PASTOR_ASSIGNMENT 
 */

CREATE TABLE PASTOR_ASSIGNMENT(
    MEMBER_PASTOR_ID       numeric(10, 0)    NOT NULL,
    END_DATE               date              DEFAULT '12/31/2099' NOT NULL,
    LOCATION_ID            int               NOT NULL,
    ASSIGNMENT_TYP         varchar(10)       NOT NULL,
    BEGIN_DT               date              NOT NULL,
    CREATE_USER_ID         varchar(30)       NOT NULL,
    CREATE_DT              date              DEFAULT 'sysdate' NOT NULL,
    LAST_UPDATE_USER_ID    varchar(30)       NOT NULL,
    LAST_UPDATE_DT         date              DEFAULT '12/31/2099' NOT NULL,
    CONSTRAINT PK_PASTOR_ASSIGNMENT PRIMARY KEY NONCLUSTERED (MEMBER_PASTOR_ID, END_DATE, LOCATION_ID)
)
go



IF OBJECT_ID('PASTOR_ASSIGNMENT') IS NOT NULL
    PRINT '<<< CREATED TABLE PASTOR_ASSIGNMENT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE PASTOR_ASSIGNMENT >>>'
go

/* 
 * TABLE: PHONE 
 */

CREATE TABLE PHONE(
    PHONE_NUMBER_ID    numeric(10, 0)    IDENTITY(1,1),
    PHONE_NO           varchar(10)       NOT NULL,
    CREATE_USER_ID     varchar(30)       NOT NULL,
    CREATE_DT          date              DEFAULT 'sysdate' NOT NULL,
    CONSTRAINT PK_PHONE PRIMARY KEY NONCLUSTERED (PHONE_NUMBER_ID)
)
go



IF OBJECT_ID('PHONE') IS NOT NULL
    PRINT '<<< CREATED TABLE PHONE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE PHONE >>>'
go

/* 
 * TABLE: STANDARD_ADDRESS 
 */

CREATE TABLE STANDARD_ADDRESS(
    ADDRESS_ID            numeric(10, 0)    IDENTITY(1,1),
    ADDRESS_LINE_1_TXT    varchar(20)       NOT NULL,
    ADDRESS_LINE_2        varchar(10)       NULL,
    CITY_NM               varchar(15)       NOT NULL,
    STATE_NM              varchar(15)       NOT NULL,
    COUNTRY_NM            varchar(20)       NOT NULL,
    CREATE_USER_ID        varchar(30)       NOT NULL,
    CREATE_DT             date              DEFAULT 'sysdate' NOT NULL,
    CONSTRAINT PK_STANDARD_ADDRESS PRIMARY KEY NONCLUSTERED (ADDRESS_ID)
)
go



IF OBJECT_ID('STANDARD_ADDRESS') IS NOT NULL
    PRINT '<<< CREATED TABLE STANDARD_ADDRESS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE STANDARD_ADDRESS >>>'
go

/* 
 * TABLE: STANDARD_ADDRESS_TYPE 
 */

CREATE TABLE STANDARD_ADDRESS_TYPE(
    ADDRESS_TYPE_CD    varchar(10)    NOT NULL,
    ADDRESS_TYPE_NM    varchar(15)    NOT NULL,
    DESCRIPTION_TXT    varchar(30)    NOT NULL,
    CREATE_USER_ID     varchar(30)    NOT NULL,
    CREATE_DT          date           DEFAULT 'sysdate' NOT NULL,
    CONSTRAINT PK_STANDARD_ADDRESS_TYPE PRIMARY KEY NONCLUSTERED (ADDRESS_TYPE_CD)
)
go



IF OBJECT_ID('STANDARD_ADDRESS_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE STANDARD_ADDRESS_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE STANDARD_ADDRESS_TYPE >>>'
go

/* 
 * TABLE: STANDARD_CONTRIBUTION 
 */

CREATE TABLE STANDARD_CONTRIBUTION(
    CONTRIBUTION_ID    int            IDENTITY(1,1),
    TYPE_TXT           varchar(50)    NOT NULL,
    CREATE_USER_ID     varchar(30)    NOT NULL,
    CREATE_DT          date           DEFAULT 'sysdate' NOT NULL,
    CONSTRAINT PK_STANDARD_CONTRIBUTION PRIMARY KEY NONCLUSTERED (CONTRIBUTION_ID)
)
go



IF OBJECT_ID('STANDARD_CONTRIBUTION') IS NOT NULL
    PRINT '<<< CREATED TABLE STANDARD_CONTRIBUTION >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE STANDARD_CONTRIBUTION >>>'
go

/* 
 * TABLE: STANDARD_GROUP 
 */

CREATE TABLE STANDARD_GROUP(
    GROUP_TYPE_CD      varchar(5)     NOT NULL,
    GROUP_AGE_BAND     varchar(30)    NOT NULL,
    GROUP_NM           varchar(15)    NOT NULL,
    DESCRIPTION_TXT    varchar(30)    NOT NULL,
    CREATE_USER_ID     varchar(30)    NOT NULL,
    CREATE_DT          date           DEFAULT 'sysdate' NOT NULL,
    CONSTRAINT PK_STANDARD_GROUP PRIMARY KEY NONCLUSTERED (GROUP_TYPE_CD)
)
go



IF OBJECT_ID('STANDARD_GROUP') IS NOT NULL
    PRINT '<<< CREATED TABLE STANDARD_GROUP >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE STANDARD_GROUP >>>'
go

/* 
 * TABLE: STANDARD_MINISTRY 
 */

CREATE TABLE STANDARD_MINISTRY(
    MINISTRY_ID        numeric(10, 0)    IDENTITY(1,1),
    MINISTRY_NM        varchar(20)       NOT NULL,
    DESCRIPTION_TXT    varchar(30)       NOT NULL,
    CREATE_USER_ID     varchar(30)       NOT NULL,
    CREATE_DT          date              DEFAULT 'sysdate' NOT NULL,
    CONSTRAINT PK_STANDARD_MINISTRY PRIMARY KEY NONCLUSTERED (MINISTRY_ID)
)
go



IF OBJECT_ID('STANDARD_MINISTRY') IS NOT NULL
    PRINT '<<< CREATED TABLE STANDARD_MINISTRY >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE STANDARD_MINISTRY >>>'
go

/* 
 * INDEX: UK_EMAIL 
 */

CREATE UNIQUE INDEX UK_EMAIL ON EMAIL(EMAIL_ADDRESS_TXT)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('EMAIL') AND name='UK_EMAIL')
    PRINT '<<< CREATED INDEX EMAIL.UK_EMAIL >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX EMAIL.UK_EMAIL >>>'
go

/* 
 * INDEX: UK_LOCATION 
 */

CREATE UNIQUE INDEX UK_LOCATION ON LOCATION(LOCATION_NM)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('LOCATION') AND name='UK_LOCATION')
    PRINT '<<< CREATED INDEX LOCATION.UK_LOCATION >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX LOCATION.UK_LOCATION >>>'
go

/* 
 * INDEX: UK_MEMBER 
 */

CREATE UNIQUE INDEX UK_MEMBER ON MEMBER(PRIMARY_FIRST_NM, PRIMARY_LAST_NM, DOB, PRIMARY_EMAIL_ADDRESS_TXT)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('MEMBER') AND name='UK_MEMBER')
    PRINT '<<< CREATED INDEX MEMBER.UK_MEMBER >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX MEMBER.UK_MEMBER >>>'
go

/* 
 * INDEX: I_LOC_LOCATION_ID 
 */

CREATE INDEX I_LOC_LOCATION_ID ON MEMBER(LOCATION_ID)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('MEMBER') AND name='I_LOC_LOCATION_ID')
    PRINT '<<< CREATED INDEX MEMBER.I_LOC_LOCATION_ID >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX MEMBER.I_LOC_LOCATION_ID >>>'
go

/* 
 * INDEX: I_AT_ADDRESS_TYPE_CD 
 */

CREATE INDEX I_AT_ADDRESS_TYPE_CD ON MEMBER_ADDRESS(ADDRESS_TYPE_CD)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('MEMBER_ADDRESS') AND name='I_AT_ADDRESS_TYPE_CD')
    PRINT '<<< CREATED INDEX MEMBER_ADDRESS.I_AT_ADDRESS_TYPE_CD >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX MEMBER_ADDRESS.I_AT_ADDRESS_TYPE_CD >>>'
go

/* 
 * INDEX: I_AD_ADDRESS_ID 
 */

CREATE INDEX I_AD_ADDRESS_ID ON MEMBER_ADDRESS(ADDRESS_ID)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('MEMBER_ADDRESS') AND name='I_AD_ADDRESS_ID')
    PRINT '<<< CREATED INDEX MEMBER_ADDRESS.I_AD_ADDRESS_ID >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX MEMBER_ADDRESS.I_AD_ADDRESS_ID >>>'
go

/* 
 * INDEX: I_MEM_MEMBER_ID 
 */

CREATE INDEX I_MEM_MEMBER_ID ON MEMBER_ADDRESS(MEMBER_ID)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('MEMBER_ADDRESS') AND name='I_MEM_MEMBER_ID')
    PRINT '<<< CREATED INDEX MEMBER_ADDRESS.I_MEM_MEMBER_ID >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX MEMBER_ADDRESS.I_MEM_MEMBER_ID >>>'
go

/* 
 * INDEX: I_MEM_MEMBER_ID 
 */

CREATE INDEX I_MEM_MEMBER_ID ON MEMBER_CONTRIBUTION(MEMBER_ID)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('MEMBER_CONTRIBUTION') AND name='I_MEM_MEMBER_ID')
    PRINT '<<< CREATED INDEX MEMBER_CONTRIBUTION.I_MEM_MEMBER_ID >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX MEMBER_CONTRIBUTION.I_MEM_MEMBER_ID >>>'
go

/* 
 * INDEX: I_CON_CONTRIBUTION 
 */

CREATE INDEX I_CON_CONTRIBUTION ON MEMBER_CONTRIBUTION(CONTRIBUTION_ID)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('MEMBER_CONTRIBUTION') AND name='I_CON_CONTRIBUTION')
    PRINT '<<< CREATED INDEX MEMBER_CONTRIBUTION.I_CON_CONTRIBUTION >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX MEMBER_CONTRIBUTION.I_CON_CONTRIBUTION >>>'
go

/* 
 * INDEX: I_MEM_MEMBER_ID 
 */

CREATE INDEX I_MEM_MEMBER_ID ON MEMBER_EMAIL(MEMBER_ID)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('MEMBER_EMAIL') AND name='I_MEM_MEMBER_ID')
    PRINT '<<< CREATED INDEX MEMBER_EMAIL.I_MEM_MEMBER_ID >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX MEMBER_EMAIL.I_MEM_MEMBER_ID >>>'
go

/* 
 * INDEX: I_EM_EMAIL_ID 
 */

CREATE INDEX I_EM_EMAIL_ID ON MEMBER_EMAIL(EMAIL_ID)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('MEMBER_EMAIL') AND name='I_EM_EMAIL_ID')
    PRINT '<<< CREATED INDEX MEMBER_EMAIL.I_EM_EMAIL_ID >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX MEMBER_EMAIL.I_EM_EMAIL_ID >>>'
go

/* 
 * INDEX: [I_GT_GROUP_TYPE-CD] 
 */

CREATE INDEX [I_GT_GROUP_TYPE-CD] ON MEMBER_GROUP(GROUP_TYPE_CD)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('MEMBER_GROUP') AND name='I_GT_GROUP_TYPE-CD')
    PRINT '<<< CREATED INDEX MEMBER_GROUP.I_GT_GROUP_TYPE-CD >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX MEMBER_GROUP.I_GT_GROUP_TYPE-CD >>>'
go

/* 
 * INDEX: I_MEM_MEMBER_ID 
 */

CREATE INDEX I_MEM_MEMBER_ID ON MEMBER_GROUP(MEMBER_ID)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('MEMBER_GROUP') AND name='I_MEM_MEMBER_ID')
    PRINT '<<< CREATED INDEX MEMBER_GROUP.I_MEM_MEMBER_ID >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX MEMBER_GROUP.I_MEM_MEMBER_ID >>>'
go

/* 
 * INDEX: I_MIN_MINISTRY_ID 
 */

CREATE INDEX I_MIN_MINISTRY_ID ON MEMBER_MINISTRY(MINISTRY_ID)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('MEMBER_MINISTRY') AND name='I_MIN_MINISTRY_ID')
    PRINT '<<< CREATED INDEX MEMBER_MINISTRY.I_MIN_MINISTRY_ID >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX MEMBER_MINISTRY.I_MIN_MINISTRY_ID >>>'
go

/* 
 * INDEX: I_MEM_MEMBER_ID 
 */

CREATE INDEX I_MEM_MEMBER_ID ON MEMBER_MINISTRY(MEMBER_ID)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('MEMBER_MINISTRY') AND name='I_MEM_MEMBER_ID')
    PRINT '<<< CREATED INDEX MEMBER_MINISTRY.I_MEM_MEMBER_ID >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX MEMBER_MINISTRY.I_MEM_MEMBER_ID >>>'
go

/* 
 * INDEX: I_MEM_MEMBER_ID 
 */

CREATE INDEX I_MEM_MEMBER_ID ON MEMBER_NAME(MEMBER_ID)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('MEMBER_NAME') AND name='I_MEM_MEMBER_ID')
    PRINT '<<< CREATED INDEX MEMBER_NAME.I_MEM_MEMBER_ID >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX MEMBER_NAME.I_MEM_MEMBER_ID >>>'
go

/* 
 * INDEX: I_NM_NAME_ID 
 */

CREATE INDEX I_NM_NAME_ID ON MEMBER_NAME(NAME_ID)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('MEMBER_NAME') AND name='I_NM_NAME_ID')
    PRINT '<<< CREATED INDEX MEMBER_NAME.I_NM_NAME_ID >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX MEMBER_NAME.I_NM_NAME_ID >>>'
go

/* 
 * INDEX: I_M_MEMBER_PHONE 
 */

CREATE INDEX I_M_MEMBER_PHONE ON MEMBER_PHONE(MEMBER_ID)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('MEMBER_PHONE') AND name='I_M_MEMBER_PHONE')
    PRINT '<<< CREATED INDEX MEMBER_PHONE.I_M_MEMBER_PHONE >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX MEMBER_PHONE.I_M_MEMBER_PHONE >>>'
go

/* 
 * INDEX: I_PO_PHONE_NO 
 */

CREATE INDEX I_PO_PHONE_NO ON MEMBER_PHONE(PHONE_NUMBER_ID)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('MEMBER_PHONE') AND name='I_PO_PHONE_NO')
    PRINT '<<< CREATED INDEX MEMBER_PHONE.I_PO_PHONE_NO >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX MEMBER_PHONE.I_PO_PHONE_NO >>>'
go

/* 
 * INDEX: UK_MEMBER_TYPE 
 */

CREATE UNIQUE INDEX UK_MEMBER_TYPE ON MEMBER_TYPE(MEMBER_TYP)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('MEMBER_TYPE') AND name='UK_MEMBER_TYPE')
    PRINT '<<< CREATED INDEX MEMBER_TYPE.UK_MEMBER_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX MEMBER_TYPE.UK_MEMBER_TYPE >>>'
go

/* 
 * INDEX: UK_NAME 
 */

CREATE UNIQUE INDEX UK_NAME ON NAME(FIRST_NM, LAST_NM)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('NAME') AND name='UK_NAME')
    PRINT '<<< CREATED INDEX NAME.UK_NAME >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX NAME.UK_NAME >>>'
go

/* 
 * INDEX: I_MEM_MEMBER_PASTOR_ID 
 */

CREATE INDEX I_MEM_MEMBER_PASTOR_ID ON PASTOR_ASSIGNMENT(MEMBER_PASTOR_ID)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('PASTOR_ASSIGNMENT') AND name='I_MEM_MEMBER_PASTOR_ID')
    PRINT '<<< CREATED INDEX PASTOR_ASSIGNMENT.I_MEM_MEMBER_PASTOR_ID >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX PASTOR_ASSIGNMENT.I_MEM_MEMBER_PASTOR_ID >>>'
go

/* 
 * INDEX: I_LOC_LOCATION_ID 
 */

CREATE INDEX I_LOC_LOCATION_ID ON PASTOR_ASSIGNMENT(LOCATION_ID)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('PASTOR_ASSIGNMENT') AND name='I_LOC_LOCATION_ID')
    PRINT '<<< CREATED INDEX PASTOR_ASSIGNMENT.I_LOC_LOCATION_ID >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX PASTOR_ASSIGNMENT.I_LOC_LOCATION_ID >>>'
go

/* 
 * INDEX: UK_PHONE 
 */

CREATE UNIQUE INDEX UK_PHONE ON PHONE(PHONE_NO)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('PHONE') AND name='UK_PHONE')
    PRINT '<<< CREATED INDEX PHONE.UK_PHONE >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX PHONE.UK_PHONE >>>'
go

/* 
 * INDEX: UK_STANDARD_ADDRESS_TYPE 
 */

CREATE UNIQUE INDEX UK_STANDARD_ADDRESS_TYPE ON STANDARD_ADDRESS_TYPE(ADDRESS_TYPE_NM)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('STANDARD_ADDRESS_TYPE') AND name='UK_STANDARD_ADDRESS_TYPE')
    PRINT '<<< CREATED INDEX STANDARD_ADDRESS_TYPE.UK_STANDARD_ADDRESS_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX STANDARD_ADDRESS_TYPE.UK_STANDARD_ADDRESS_TYPE >>>'
go

/* 
 * INDEX: UK_STANDARD_CONTRIBUTION 
 */

CREATE UNIQUE INDEX UK_STANDARD_CONTRIBUTION ON STANDARD_CONTRIBUTION(TYPE_TXT)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('STANDARD_CONTRIBUTION') AND name='UK_STANDARD_CONTRIBUTION')
    PRINT '<<< CREATED INDEX STANDARD_CONTRIBUTION.UK_STANDARD_CONTRIBUTION >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX STANDARD_CONTRIBUTION.UK_STANDARD_CONTRIBUTION >>>'
go

/* 
 * INDEX: UK_STANDARD_GROUP 
 */

CREATE UNIQUE INDEX UK_STANDARD_GROUP ON STANDARD_GROUP(GROUP_NM)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('STANDARD_GROUP') AND name='UK_STANDARD_GROUP')
    PRINT '<<< CREATED INDEX STANDARD_GROUP.UK_STANDARD_GROUP >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX STANDARD_GROUP.UK_STANDARD_GROUP >>>'
go

/* 
 * INDEX: UK_STANDARD_MINISTRY 
 */

CREATE UNIQUE INDEX UK_STANDARD_MINISTRY ON STANDARD_MINISTRY(MINISTRY_NM, DESCRIPTION_TXT)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('STANDARD_MINISTRY') AND name='UK_STANDARD_MINISTRY')
    PRINT '<<< CREATED INDEX STANDARD_MINISTRY.UK_STANDARD_MINISTRY >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX STANDARD_MINISTRY.UK_STANDARD_MINISTRY >>>'
go

/* 
 * TABLE: MEMBER 
 */

ALTER TABLE MEMBER ADD CONSTRAINT RefLOCATION33 
    FOREIGN KEY (LOCATION_ID)
    REFERENCES LOCATION(LOCATION_ID)
go


/* 
 * TABLE: MEMBER_ADDRESS 
 */

ALTER TABLE MEMBER_ADDRESS ADD CONSTRAINT RefSTANDARD_ADDRESS2 
    FOREIGN KEY (ADDRESS_ID)
    REFERENCES STANDARD_ADDRESS(ADDRESS_ID)
go

ALTER TABLE MEMBER_ADDRESS ADD CONSTRAINT RefSTANDARD_ADDRESS_TYPE6 
    FOREIGN KEY (ADDRESS_TYPE_CD)
    REFERENCES STANDARD_ADDRESS_TYPE(ADDRESS_TYPE_CD)
go

ALTER TABLE MEMBER_ADDRESS ADD CONSTRAINT RefMEMBER15 
    FOREIGN KEY (MEMBER_ID)
    REFERENCES MEMBER(MEMBER_ID)
go


/* 
 * TABLE: MEMBER_CONTRIBUTION 
 */

ALTER TABLE MEMBER_CONTRIBUTION ADD CONSTRAINT RefMEMBER34 
    FOREIGN KEY (MEMBER_ID)
    REFERENCES MEMBER(MEMBER_ID)
go

ALTER TABLE MEMBER_CONTRIBUTION ADD CONSTRAINT RefSTANDARD_CONTRIBUTION35 
    FOREIGN KEY (CONTRIBUTION_ID)
    REFERENCES STANDARD_CONTRIBUTION(CONTRIBUTION_ID)
go


/* 
 * TABLE: MEMBER_EMAIL 
 */

ALTER TABLE MEMBER_EMAIL ADD CONSTRAINT RefMEMBER25 
    FOREIGN KEY (MEMBER_ID)
    REFERENCES MEMBER(MEMBER_ID)
go

ALTER TABLE MEMBER_EMAIL ADD CONSTRAINT RefEMAIL26 
    FOREIGN KEY (EMAIL_ID)
    REFERENCES EMAIL(EMAIL_ID)
go


/* 
 * TABLE: MEMBER_GROUP 
 */

ALTER TABLE MEMBER_GROUP ADD CONSTRAINT RefSTANDARD_GROUP21 
    FOREIGN KEY (GROUP_TYPE_CD)
    REFERENCES STANDARD_GROUP(GROUP_TYPE_CD)
go

ALTER TABLE MEMBER_GROUP ADD CONSTRAINT RefMEMBER22 
    FOREIGN KEY (MEMBER_ID)
    REFERENCES MEMBER(MEMBER_ID)
go


/* 
 * TABLE: MEMBER_MINISTRY 
 */

ALTER TABLE MEMBER_MINISTRY ADD CONSTRAINT RefSTANDARD_MINISTRY7 
    FOREIGN KEY (MINISTRY_ID)
    REFERENCES STANDARD_MINISTRY(MINISTRY_ID)
go

ALTER TABLE MEMBER_MINISTRY ADD CONSTRAINT RefMEMBER16 
    FOREIGN KEY (MEMBER_ID)
    REFERENCES MEMBER(MEMBER_ID)
go


/* 
 * TABLE: MEMBER_NAME 
 */

ALTER TABLE MEMBER_NAME ADD CONSTRAINT RefNAME27 
    FOREIGN KEY (NAME_ID)
    REFERENCES NAME(NAME_ID)
go

ALTER TABLE MEMBER_NAME ADD CONSTRAINT RefMEMBER28 
    FOREIGN KEY (MEMBER_ID)
    REFERENCES MEMBER(MEMBER_ID)
go


/* 
 * TABLE: MEMBER_PHONE 
 */

ALTER TABLE MEMBER_PHONE ADD CONSTRAINT RefMEMBER23 
    FOREIGN KEY (MEMBER_ID)
    REFERENCES MEMBER(MEMBER_ID)
go

ALTER TABLE MEMBER_PHONE ADD CONSTRAINT RefPHONE24 
    FOREIGN KEY (PHONE_NUMBER_ID)
    REFERENCES PHONE(PHONE_NUMBER_ID)
go


/* 
 * TABLE: MEMBERSHIP 
 */

ALTER TABLE MEMBERSHIP ADD CONSTRAINT RefMEMBER30 
    FOREIGN KEY (MEMBER_ID)
    REFERENCES MEMBER(MEMBER_ID)
go

ALTER TABLE MEMBERSHIP ADD CONSTRAINT RefMEMBER_TYPE31 
    FOREIGN KEY (MEMBER_TYPE_ID)
    REFERENCES MEMBER_TYPE(MEMBER_TYPE_ID)
go


/* 
 * TABLE: PASTOR_ASSIGNMENT 
 */

ALTER TABLE PASTOR_ASSIGNMENT ADD CONSTRAINT RefMEMBER20 
    FOREIGN KEY (MEMBER_PASTOR_ID)
    REFERENCES MEMBER(MEMBER_ID)
go

ALTER TABLE PASTOR_ASSIGNMENT ADD CONSTRAINT RefLOCATION32 
    FOREIGN KEY (LOCATION_ID)
    REFERENCES LOCATION(LOCATION_ID)
go


